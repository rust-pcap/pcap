name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "0 6 * * *"

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_VERBOSE: true
  CARGO_TERM_COLOR: always

jobs:
  cargo-test:
    strategy:
      matrix:
        os: [windows-latest]
        toolchain: [stable]
        profile: ['']
        features: ['']
        # os: [windows-latest, ubuntu-latest, macos-latest]
        # toolchain: ["1.46.0", stable, beta]
        # profile: ['', --release]
        # features: ['', '--all-features']
        # exclude:
        #   # capture-stream is not supported on Windows or compiler versions too old for Tokio.
        #   - os: windows-latest
        #     features: '--all-features'
        #   - toolchain: "1.46.0"
        #     features: '--all-features'
        # include:
        #   # nightly check is performed on ubuntu only.
        #   - os: ubuntu-latest
        #     toolchain: nightly
        #     profile: ''
        #     features: --all-features
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Install libpcap (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libpcap-dev
      - name: Install libpcap (macos)
        if: matrix.os == 'macos-latest'
        run: brew install libpcap
      - name: Install WinPcap and WinPcap 4.1.2 Developer's Pack (windows)
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri "https://${{ secrets.NPCAP_OEM_USERNAME }}:${{ secrets.NPCAP_OEM_PASSWORD }}@npcap.com/oem/dist/npcap-1.71-oem.exe"
          .\npcap-1.71-oem.exe /S
          Invoke-WebRequest -Uri "https://npcap.com/dist/npcap-sdk-1.13.zip" -OutFile "C:/NpcapSdk.zip"
          Expand-Archive -LiteralPath C:/NpcapSdk.zip -DestinationPath C:/
          echo "LIB=C:/NpcapSdk/Lib/x64" >> $env:GITHUB_ENV
      - name: Select rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy, rustfmt
          override: true
      - name: cargo build
        run: cargo build ${{ matrix.profile }} ${{ matrix.features }}
      - name: cargo test
        run: cargo test ${{ matrix.profile }} ${{ matrix.features }}
      - name: cargo clippy
        if: matrix.toolchain == 'stable'
        run: cargo clippy ${{ matrix.profile }} ${{ matrix.features }} -- -D warnings
      - name: cargo doc
        run: env DOCS_RS=true cargo doc ${{ matrix.profile }} ${{ matrix.features }} --no-deps
      - name: cargo fmt
        if: matrix.toolchain == 'stable'
        run: cargo fmt -- --check
